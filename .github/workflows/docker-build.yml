name: Build, Test and Push Stylo Docker Images with Compose

on:
  push:
    branches: [main]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract short SHA
        id: vars
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      # אין צורך בקובץ env בריפו; מייצרים זמני מריפוזיטורי סיקרטס
      - name: Create backend .env file
        run: |
          echo "REPLICATE_API_TOKEN=${{ secrets.REPLICATE_API_TOKEN }}" >> backend/.env
          echo "REPLICATE_MODEL=${{ secrets.REPLICATE_MODEL }}" >> backend/.env
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> backend/.env

      - name: Build services with docker compose
        run: docker compose -f docker-compose.yml build

      - name: Run services with docker compose
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 10

      - name: Check backend is running
        run: |
          if [ "$(docker inspect -f '{{.State.Running}}' $(docker compose ps -q backend))" != "true" ]; then
            echo "Backend failed to start"
            docker compose logs backend
            exit 1
          fi

      - name: Check frontend is running
        run: |
          if [ "$(docker inspect -f '{{.State.Running}}' $(docker compose ps -q frontend))" != "true" ]; then
            echo "Frontend failed to start"
            docker compose logs frontend
            exit 1
          fi

      - name: Test backend HTTP response
        run: |
          echo "Testing backend endpoint..."
          curl --fail http://localhost:8000 || (echo "Backend did not respond properly" && exit 1)

      - name: Test frontend HTTP response
        run: |
          echo "Testing frontend endpoint..."
          curl --fail http://localhost:8080 || (echo "Frontend did not respond properly" && exit 1)

      - name: Shut down containers
        run: docker compose -f docker-compose.yml down

      - name: Clean old DockerHub images (backend)
        env:
          IMAGE_NAME: stylo-backend
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Cleaning old backend tags from DockerHub..."
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'"$DOCKER_USERNAME"'", "password": "'"$DOCKER_PASSWORD"'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$IMAGE_NAME/tags/?page_size=100" | jq -r '.results | sort_by(.last_updated) | .[].name')
          COUNT=$(echo "$TAGS" | wc -l)
          KEEP=5
          echo "Found $COUNT backend tags"
          if [ "$COUNT" -gt "$KEEP" ]; then
            DELETE=$(echo "$TAGS" | head -n $(($COUNT - $KEEP)))
            for tag in $DELETE; do
              echo "Deleting backend tag: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$IMAGE_NAME/tags/$tag/"
            done
          else
            echo "No backend tags to delete"
          fi

      - name: Clean old DockerHub images (frontend)
        env:
          IMAGE_NAME: stylo-frontend
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "Cleaning old frontend tags from DockerHub..."
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'"$DOCKER_USERNAME"'", "password": "'"$DOCKER_PASSWORD"'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          TAGS=$(curl -s -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$IMAGE_NAME/tags/?page_size=100" | jq -r '.results | sort_by(.last_updated) | .[].name')
          COUNT=$(echo "$TAGS" | wc -l)
          KEEP=5
          echo "Found $COUNT frontend tags"
          if [ "$COUNT" -gt "$KEEP" ]; then
            DELETE=$(echo "$TAGS$" | head -n $(($COUNT - $KEEP))) || true
            for tag in $DELETE; do
              echo "Deleting frontend tag: $tag"
              curl -s -X DELETE -H "Authorization: JWT $TOKEN" "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$IMAGE_NAME/tags/$tag/"
            done
          else
            echo "No frontend tags to delete"
          fi

      - name: Tag and Push images to DockerHub
        run: |
          docker tag ${DOCKER_USERNAME}/stylo-backend:latest ${DOCKER_USERNAME}/stylo-backend:${{ env.SHORT_SHA }}
          docker tag ${DOCKER_USERNAME}/stylo-frontend:latest ${DOCKER_USERNAME}/stylo-frontend:${{ env.SHORT_SHA }}

          docker push ${DOCKER_USERNAME}/stylo-backend:${{ env.SHORT_SHA }}
          docker push ${DOCKER_USERNAME}/stylo-backend:latest

          docker push ${DOCKER_USERNAME}/stylo-frontend:${{ env.SHORT_SHA }}
          docker push ${DOCKER_USERNAME}/stylo-frontend:latest

      - name: Save image digests
        run: |
          docker pull ${DOCKER_USERNAME}/stylo-backend:${{ env.SHORT_SHA }}
          docker pull ${DOCKER_USERNAME}/stylo-frontend:${{ env.SHORT_SHA }}

          docker inspect --format='{{index .RepoDigests 0}}' ${DOCKER_USERNAME}/stylo-backend:${{ env.SHORT_SHA }} > digest-backend.txt
          docker inspect --format='{{index .RepoDigests 0}}' ${DOCKER_USERNAME}/stylo-frontend:${{ env.SHORT_SHA }} > digest-frontend.txt

      - name: Upload digest artifacts
        uses: actions/upload-artifact@v4
        with:
          name: stylo-image-digests
          path: |
            digest-backend.txt
            digest-frontend.txt
